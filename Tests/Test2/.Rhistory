pivot_longer(c("1999","2000"),
names_to = "Year",
values_to = "Cases")
table4a_original <- table4a_mod %>%
pivot_wider(names_from = Year,
values_from = Cases)
flights
flights %>% select(flight)
cases_data <- tibble(
country_id = 1:4,
name = c("NZ", "AU", "Italy", "US"),
cases_count = c(12314,1244,5155,1555),
population = c(12415,515,5,5135),
region = c("Oceania", "Oceania", "Europe", "America")
)
cases_data
cases_data %>%
summarise(ave = mean(cases_count),
aver = mean(population))
cases_data %>%
group_by(region) %>%
summarise(count = n(),
total_cases = sum(cases_count),
total_pop = sum(population)) %>%
mutate(total_rate = total_cases/total_pop)
cases_data %>%
mutate(colony = c("Y", "Y", "N", "Y")) %>%
group_by(colony) %>%
summarise(total_cases = sum(cases_count))
cases_data %>%
select(-region) %>%
gather(cases_count, population, key = "vari", value = "count")
cases_data %>%
select(-region) %>%
filter(name == c("NZ","AU")) %>%
gather(cases_count, population, key = "vari", value = "count")
setwd("H:/COMP120/Tests/Test2")
## You will need to load the following libraries (i.e., run the following lines of code)
library(tidyverse)
library(rvest)
library(randomForest)
# Question 1
install.packages("rvest")
# Question 1
products <- read_html("products.html") %>%
html_node("body > table") %>%
html_table(fill=TRUE)
# Question 1
products <- read_html("products.html") %>%
html_node("body > table") %>%
html_table(fill=TRUE)
View(products)
products
# Question 1
products <- read_html("products.html") %>%
html_node("body > table") %>%
html_table(fill=TRUE) %>%
as.tibble()
products
# Question 2
products %>%
separate(combined_code, into = c("product_code", "product_name"), sep = ":")
# Question 3
customers <- read_csv("customers.csv")
sales <- read_csv("sales.csv")
customers
sales
customers %>% full_join(sales) %>% left_join(products)
products
# Question 2
products <- products %>%
separate(combined_code, into = c("product_code", "product_name"), sep = ":")
products
customers %>% full_join(sales) %>% left_join(products)
output1 <- customers %>% full_join(sales) %>% left_join(products)
# Question 4
output1 %>%
select(customer_name)
output1
# Question 4
output1 %>%
select(customer_name, product_code)
output1
# Question 4
output1 %>%
select(customer_name, product_code, price)
# Question 4
output1 %>%
select(customer_name, product_code, price) %>%
filter(!is.na(price))
# Question 4
output1 %>%
select(customer_name, product_code, price) %>%
filter(!is.na(price)) %>%
pivot_wider(names_from = product_code,
values_from = price)
# Question 4
output2 <- output1 %>%
select(customer_name, product_code, price) %>%
filter(!is.na(price)) %>%
pivot_wider(names_from = product_code,
values_from = price)
# Question 5
output2
# Question 5
output1
# Question 5
output1 %>%
filter(!is.na(product_code)) %>%
group_by(product_code) %>%
summarise(product_name,
count=n())
# Question 5
output1 %>%
filter(!is.na(product_code)) %>%
group_by(product_code) %>%
summarise(count=n())
# Question 5
output1 %>%
filter(!is.na(product_code)) %>%
group_by(product_code) %>%
summarise(product_name,
count=n())
# Question 5
output1 %>%
filter(!is.na(product_code)) %>%
group_by(product_code,product_name) %>%
summarise(count=n())
# Question 5
output3 <- output1 %>%
filter(!is.na(product_code)) %>%
group_by(product_code,product_name) %>%
summarise(count=n())
# Question 6
house_prices <- read_csv("house_prices.csv")
house_prices
# Question 6
houses <- read_csv("house_prices.csv")
houses
#6a
f <- price ~ bedrooms + bathrooms + sqft_living
train_data <- houses
mod1 <- lm(f, train_data)
summary(mod1)
#6b
f <- price ~ bedrooms + bathrooms + sqft_living + sqft_lot
mod2 <- randomForest(f, train_data)
summary(mod2)
mod1 <- lm(f, train_data)
summary(mod1)$rsq
summary(mod1)
summary(mod1)$r.square
#6a
f <- price ~ bedrooms + bathrooms + sqft_living
train_data <- houses # use 100% data to train
mod1 <- lm(f, train_data)
summary(mod1)$r.square
#6b
f <- price ~ bedrooms + bathrooms + sqft_living + sqft_lot
train_data <- houses # use 100% data to train
mod2 <- randomForest(f, train_data)
summary(mod2)r.square
mean(model2$rsq)
mean(mod2$rsq)
mod2$rsq
mod2 <- randomForest(f, train_data)
mean(mod2$rsq) # display R-square statistic for randomForest model
#6a
f <- price ~ bedrooms + bathrooms + sqft_living
train_data <- houses # use 100% data to train
mod1 <- lm(f, train_data)
summary(mod1)$r.square # display R-square statistic regression model
#6b
f <- price ~ bedrooms + bathrooms + sqft_living + sqft_lot
train_data <- houses # use 100% data to train
mod2 <- randomForest(f, train_data)
mean(mod2$rsq) # display R-square statistic for randomForest model
View(train_data)
#6d
#construct test data
test_data = data.frame(bedrooms=4,
bathrooms=2,
sqft_living=1000,
sqft_lot=5000)
predict(mod2, test_data)
# Question 7
# Code to create players tibble
players <- tribble(~player_id, ~first_name, ~last_name, ~country,
"1001", "Adam", "Walker", "New Zealand",
"1002", "Ben", "Taylor", "Australia",
"1003", "Chris", "Hanson", "South Africa",
"1004", "Dorothy", "Cooper", "England",
"1005", "Emma" , "Minsky", "Poland",
"1006", "Florence", "Evans", "Italy"
)
# Code to create matches tibble
matches <- tribble(~player1, ~player2, ~winner_id, ~prize_id,
"1001", "1002", "1002", 1,
"1002", "1003", "1002", 2,
"1001", "1003", "1003", 3,
"1004", "1006", "1004", 4,
"1004", "1005", "1005", 5)
# Code to create prizes tibble
prizes <- tribble(~prize_id, ~amount,
1, 1000,
2, 1500,
3, 1000,
4, 2000,
5, 3000)
# Code to create trophies tibble
trophies <- tribble(~"Adam Walker", ~"Ben Taylor", ~"Chris Hanson", ~"Dorothy Cooper", ~"Emma Minsky", ~"Florence Evans",
0,4,3,1,17,0)
# Question 7
# Code to create players tibble
players <- tribble(~player_id, ~first_name, ~last_name, ~country,
"1001", "Adam", "Walker", "New Zealand",
"1002", "Ben", "Taylor", "Australia",
"1003", "Chris", "Hanson", "South Africa",
"1004", "Dorothy", "Cooper", "England",
"1005", "Emma" , "Minsky", "Poland",
"1006", "Florence", "Evans", "Italy"
)
# Code to create matches tibble
matches <- tribble(~player1, ~player2, ~winner_id, ~prize_id,
"1001", "1002", "1002", 1,
"1002", "1003", "1002", 2,
"1001", "1003", "1003", 3,
"1004", "1006", "1004", 4,
"1004", "1005", "1005", 5)
# Code to create prizes tibble
prizes <- tribble(~prize_id, ~amount,
1, 1000,
2, 1500,
3, 1000,
4, 2000,
5, 3000)
# Code to create trophies tibble
trophies <- tribble(~"Adam Walker", ~"Ben Taylor", ~"Chris Hanson", ~"Dorothy Cooper", ~"Emma Minsky", ~"Florence Evans",
0,4,3,1,17,0)
#a) creating the tibble
matches
players
prizes
trophies
# Write code for question 7
trophies %>%
pivot_longer(c("Adam Walker", "Ben Taylor", "Chris Hanson",
"Dorothy Cooper", "Emma Minsky", "Florence Evans"),
names_to = "player_name",
values_tp = "amount")
# Write code for question 7
trophies %>%
pivot_longer(c("Adam Walker", "Ben Taylor", "Chris Hanson",
"Dorothy Cooper", "Emma Minsky", "Florence Evans"),
names_to = "player_name",
values_to = "amount")
# Write code for question 7
trophies %>%
pivot_longer(c("Adam Walker", "Ben Taylor", "Chris Hanson",
"Dorothy Cooper", "Emma Minsky", "Florence Evans"),
names_to = "player_names",
values_to = "amount") %>%
separate(player_names, into = c("first_name", "last_name"))
# Write code for question 7
trophies <- trophies %>%
pivot_longer(c("Adam Walker", "Ben Taylor", "Chris Hanson",
"Dorothy Cooper", "Emma Minsky", "Florence Evans"),
names_to = "player_names",
values_to = "amount") %>%
separate(player_names, into = c("first_name", "last_name"))
#a) creating the tibble
prizes %>% full_join(players)
#a) creating the tibble
players %>% inner_join(matches, by = c("player_id" = "winner_id"))
#a) creating the tibble
players %>%
inner_join(matches, by = c("player_id" = "winner_id")) %>%
inner_join(prizes) %>%
inner_join(trophies)
#a) creating the tibble
players %>%
inner_join(matches, by = c("player_id" = "winner_id")) %>%
inner_join(prizes)
#a) creating the tibble
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
inner_join(prizes)
#a) creating the tibble
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes)
#a) creating the tibble
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes) %>%
left_join(trophies, by = first_name)
#a) creating the tibble
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes) %>%
left_join(trophies, by = "first_name")
#reshape and transform trophies table to easily combine tables
trophies <- trophies %>%
pivot_longer(c("Adam Walker", "Ben Taylor", "Chris Hanson",
"Dorothy Cooper", "Emma Minsky", "Florence Evans"),
names_to = "player_names",
values_to = "trophy_amount") %>%
separate(player_names, into = c("first_name", "last_name"))
#a) creating the tibble
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes) %>%
left_join(trophies, by = "first_name") %>%
select(player_id, first_name, last_name, amount, )
#a) creating the tibble
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes) %>%
left_join(trophies, by = "first_name") %>%
select(player_id, first_name, last_name, trophy_amount )
#a) creating the tibble
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes) %>%
left_join(trophies, by = "first_name") %>%
select(player_id, first_name, last_name)
#a) creating the tibble
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes) %>%
left_join(trophies, by = "first_name")
View(trophies)
#reshape and transform trophies table to easily combine tables
trophies <- trophies %>%
pivot_longer(c("Adam Walker", "Ben Taylor", "Chris Hanson",
"Dorothy Cooper", "Emma Minsky", "Florence Evans"),
names_to = "player_names",
values_to = "trophy_amount") %>%
separate(player_names, into = c("first_name", "last_name"))
# Code to create trophies tibble
trophies <- tribble(~"Adam Walker", ~"Ben Taylor", ~"Chris Hanson", ~"Dorothy Cooper", ~"Emma Minsky", ~"Florence Evans",
0,4,3,1,17,0)
#reshape and transform trophies table to easily combine tables
trophies <- trophies %>%
pivot_longer(c("Adam Walker", "Ben Taylor", "Chris Hanson",
"Dorothy Cooper", "Emma Minsky", "Florence Evans"),
names_to = "player_names",
values_to = "trophy_amount") %>%
separate(player_names, into = c("first_name", "last_name"))
#a) creating the tibble
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes) %>%
left_join(trophies, by = "first_name") %>%
select(player_id, first_name, last_name)
#a) creating the tibble
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes) %>%
left_join(trophies, by = "first_name")
#a) creating the tibble
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes) %>%
left_join(trophies, by = "first_name") %>%
select(player_id, trophy_amount)
#a) creating the tibble
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes) %>%
left_join(trophies, by = "first_name")
#a) creating the tibble
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes) %>%
left_join(trophies, by = c("first_name", "last_name"))
#a) creating the tibble
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes) %>%
left_join(trophies, by = c("first_name", "last_name")) %>%
select(player_id, first_name, last_name, amount, trophy_amount)
#a) creating the tibble
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes) %>%
left_join(trophies, by = c("first_name", "last_name")) %>%
filter(!is.na(amount)) %>%
select(player_id, first_name, last_name, amount, trophy_amount)
#a) creating the tibble
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes) %>%
left_join(trophies, by = c("first_name", "last_name")) %>%
filter(!is.na(amount)) %>%
select(player_id, first_name, last_name, amount, trophy_amount) %>%
group_by(player_id,first_name, last_name) %>%
summarise(total_prize = sum(amount),
total_trophy = sum(trophy_amount))
money_and_trophy
#a) creating the tibble
money_and_trophy <-
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes) %>%
left_join(trophies, by = c("first_name", "last_name")) %>%
filter(!is.na(amount)) %>%
select(player_id, first_name, last_name, amount, trophy_amount) %>%
group_by(player_id,first_name, last_name) %>%
summarise(total_prize = sum(amount),
total_trophy = sum(trophy_amount))
money_and_trophy
#a) creating the tibble
money_and_trophy <-
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes) %>%
left_join(trophies, by = c("first_name", "last_name")) %>%
select(player_id, first_name, last_name, amount, trophy_amount) %>%
group_by(player_id,first_name, last_name) %>%
summarise(total_prize = sum(amount),
total_trophy = sum(trophy_amount))
money_and_trophy
?fillna()
#a) creating the tibble
money_and_trophy <-
players %>%
left_join(matches, by = c("player_id" = "winner_id")) %>%
left_join(prizes) %>%
left_join(trophies, by = c("first_name", "last_name")) %>%
select(player_id, first_name, last_name, amount, trophy_amount) %>%
mutate(amount = ifelse(is.na(amount), 0, amount)) %>%
group_by(player_id,first_name, last_name) %>%
summarise(total_prize = sum(amount),
total_trophy = sum(trophy_amount))
money_and_trophy
#b) creating the visualisation
money_and_trophy %>%
mutate(full_name = str_c(first_name, last_name))
#b) creating the visualisation
money_and_trophy %>%
mutate(full_name = str_c(first_name, last_name, sep = " "))
#b) creating the visualisation
money_and_trophy %>%
mutate(full_name = str_c(first_name, last_name, sep = " ")) %>%
ggplot(aes(x = full_name, y=amount))
#b) creating the visualisation
money_and_trophy %>%
mutate(full_name = str_c(first_name, last_name, sep = " ")) %>%
ggplot(aes(x = full_name, y=total_prize))
money_and_trophy
#b) creating the visualisation
money_and_trophy %>%
mutate(full_name = str_c(first_name, last_name, sep = " ")) %>%
ggplot(aes(x = full_name, y=total_prize))+
geom_bar()
#b) creating the visualisation
money_and_trophy %>%
mutate(full_name = str_c(first_name, last_name, sep = " ")) %>%
ggplot(aes(x = full_name, y=total_prize))+
geom_bar(stat = "identity")
#b) creating the visualisation
money_and_trophy %>%
mutate(full_name = str_c(first_name, last_name, sep = " ")) %>%
ggplot(aes(x = full_name, y=reorder(total_prize)))+
geom_bar(stat = "identity")
#b) creating the visualisation
money_and_trophy %>%
mutate(full_name = str_c(first_name, last_name, sep = " ")) %>%
ggplot(aes(x = reorder(total_prize, full_name), y=total_prize))+
geom_bar(stat = "identity")
#b) creating the visualisation
money_and_trophy %>%
mutate(full_name = str_c(first_name, last_name, sep = " ")) %>%
ggplot(aes(x = reorder(total_prize, full_name), y=total_prize))+
geom_bar(stat = "identity")+
xlab("Player")+
ylab("Prize money")
#b) creating the visualisation
money_and_trophy %>%
mutate(full_name = str_c(first_name, last_name, sep = " ")) %>%
ggplot(aes(x = reorder(full_name, total_prize), y=total_prize))+
geom_bar(stat = "identity")+
xlab("Player")+
ylab("Prize money")
?ggtitle
#b) creating the visualisation
money_and_trophy %>%
mutate(full_name = str_c(first_name, last_name, sep = " ")) %>%
ggplot(aes(x = reorder(full_name, total_prize), y=total_prize))+
geom_bar(stat = "identity")+
xlab("Player")+
ylab("Prize money")+
ggtitle("Prize money won at Dunedin Meadows")
#b) creating the visualisation
money_and_trophy %>%
mutate(full_name = str_c(first_name, last_name, sep = " ")) %>%
ggplot(aes(x = reorder(full_name, total_prize), y=total_prize))+
geom_bar(stat = "identity")+
xlab("Player")+
ylab("Prize money")+
ggtitle("Prize money won at Dunedin Meadows")+
theme(plot.title = element_text(hjust = 0.5))
#b) creating the visualisation
money_and_trophy %>%
mutate(full_name = str_c(first_name, last_name, sep = " ")) %>%  # combine first name and last name
ggplot(aes(x = reorder(full_name, total_prize), y=total_prize))+ # reorder based on total prize order
geom_bar(stat = "identity")+
xlab("Player")+
ylab("Prize money")+
ggtitle("Prize money won at Dunedin Meadows")+
theme(plot.title = element_text(hjust = 0.5)) # center title
