v <- c(1,5,10,99,10,100)
v==10
which(v==10)
length(which(v==10))
count <- function(v,e) {
length(which(v==e))
}
contains <- function(v, e) {
length(which(v==e)) > 0
}
contains(v,5)
v[1]
v[which(v==10)]
v[v==10]
#2d.	Write a single line of code that prints the total number of elements in A that are less than 5
sum(A<5)
## Solution to question 2
A <- c(1, 10, 2, 9, 3, 8, 4, 7, 5, 6)
#2d.	Write a single line of code that prints the total number of elements in A that are less than 5
sum(A<5)
sum(A<5)
#2f. prints the elements whose index is odd
A[seq(1,15,2)]
length(V[V>T])
## Solution to question 4
count_elements <- function(V,T){
length(V[V>T])
}
count_elements(c(97, 48, 26, 57, 64), 50)
setwd("H:/COMP120/Lab/Lab05")
# Step 6
#restrict the data frame to rows with a MeasurementDate before the 1st of December 2017
filtered_data <- bp %>%
filter(as_date(MeasurementDate) < dmy("01-12-2017"))
## Code for the first question should be provided below. Note there are several steps for this question. Provide code
## for each step in the placeholder provided below.
library(tidyverse)
library(lubridate)
# Step 2
# Load csv file BloodPressure into bp tibble
bp <- read_csv("BloodPressure.csv", na = c("TH","TL"))
# Step 3
# convert character type column MeasurementDate into date time type column.
bp$MeasurementDate <- dmy_hm(bp$MeasurementDate)
# Step 4
# Replace some values contain character, and convert the whole column into numeric type
bp$Pulse <- str_replace(bp$Pulse," EST","")
bp$Pulse <- as.numeric(bp$Pulse)
bp
# Step 5
# Create SYS.Class, DIA.CLass columns based on value of the existing SYS and DIA columns, and another Rating column
bp <-  mutate(bp,
SYS.Class = cut(SYS, breaks = c(0,90,120,140,Inf), right = FALSE,
labels = c("Low", "Normal", "Elevated", "High")),
DIA.Class = cut(DIA, breaks = c(0,60,80,90,Inf), right = FALSE,
labels = c("Low", "Normal", "Elevated", "High")),
Rating = factor(ifelse((SYS.Class=="High"|DIA.Class=="High"), "High", "Normal"))
)
bp
# Step 6
#restrict the data frame to rows with a MeasurementDate before the 1st of December 2017
filtered_data <- bp %>%
filter(as_date(MeasurementDate) < dmy("01-12-2017"))
# Step 7
ggplot(data = filtered_data, aes(x = MeasurementDate, y = Pulse)) +
geom_linerange(aes(ymin = DIA, ymax = SYS, colour = Rating)) +
geom_point() +
xlab("Measurement date")
# Q2a
# display all rows where the value in the SYS column is greater than or
# equal to 100 and the value for DIA column is greater than 75
filtered_data %>%
filter(SYS>=100 & DIA >75) %>%
arrange(desc(Pulse))
# Q2b
#display values of just two columns (MeasurementDate and Rating)
#where the value of Rating is High
filtered_data %>%
mutate(newcol = as_date(MeasurementDate)) %>%
select(newcol, Rating) %>%
filter(Rating == "High")
# Q2b
#display values of just two columns (MeasurementDate and Rating)
#where the value of Rating is High
filtered_data %>%
mutate(newcol = as_date(MeasurementDate)) %>%
select(newcol, Rating) %>%
filter(Rating == "High")
View(bp)
View(filtered_data)
# Q2a
# display all rows where the value in the SYS column is greater than or
# equal to 100 and the value for DIA column is greater than 75
filtered_data %>%
filter(SYS>=100 & DIA >75) %>%
arrange(desc(Pulse))
# Step 7
ggplot(data = filtered_data, aes(x = MeasurementDate, y = Pulse)) +
geom_linerange(aes(ymin = DIA, ymax = SYS, colour = Rating)) +
geom_point() +
xlab("Measurement date")
