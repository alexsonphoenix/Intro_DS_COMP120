source('H:/COMP120/Lab/Lb07/mastery/mastery-07.R')
source('H:/COMP120/Lab/Lb07/mastery/mastery-07.R')
source('H:/COMP120/Lab/Lb07/mastery/mastery-07.R')
source('H:/COMP120/Lab/Lb07/mastery/mastery-07.R')
be included below.
# Don't forget to add your student id and the name in the file (see placeholders above).
# Write a comment before each block of code that you use to complete
# a given task that explains what the c
setwd("H:/COMP120/Lab/lab09")
install.packages("randomForest")
library(tidyverse)
library(randomForest)
set.seed(123) ## FIX THE RANDOM NUMBER GENERATOR FOR REPRODUCIBILITY
housing <- read_csv("housing.csv")
train <- housing %>% sample_frac(0.8)
test <- housing %>% setdiff(train)
f <- medv ~ chas + dis + lstat + nox + ptratio + rm
# Compute R square statustic for the data
rsqr <- function(y, yhat) {
ss.res <- sum((y - yhat)^2)
ss.tot <- sum((y - mean(y))^2)
1 - ss.res / ss.tot
}
#-----------------------------------------------------------LINEAR REGRESSION-------------------------------------------------------
model <- lm(f, data = train)
summary(model)
# Use predict function to predict the results for the test data
yhat <- predict(model, test)
# Create a new variable called test_mod that is made up of variables # in test plus the residual variable
test_mod <- test %>% mutate(residual = medv - yhat)
# Visualise the residual plot
ggplot(test_mod, aes(x=medv, y=residual)) +
geom_point() +
xlim(0, 60) +
ylim(-30,30) +
geom_abline(slope = 0, intercept=0, col = "blue") +
ggtitle("Median house value vs. residual") +
xlab("Median value") +
ylab("Residual")
rsqr(test$medv, yhat)
#-----------------------------------------------------------RANDOM FOREST-------------------------------------------------------
# Create a model using randomForest function (using training data)
mdl <- randomForest(f, train)
# Predict the results of the test data
yhat <- predict(mdl, test)
# Display r-squared values
rsqr(test$medv, yhat)
# Create a new variable that has all the columns of the test dataset # plus the residual variable
test_mod <- test %>% mutate(residual = medv - yhat)
# Visualise the residual plot
ggplot(test_mod, aes(x=medv, y=residual)) +
geom_point() +
xlim(0, 60) +
ylim(-30,30) +
geom_abline(slope = 0, intercept=0, col = "blue") +
ggtitle("Median house value vs. residual") +
xlab("Median value") +
ylab("Residual")
# Load the appropriate packages/libraries for this mastery task. Code for one of them is given below.
library(tidyverse)
# A random seed has been set for you. You must execute this line before creating training and test data so that the results are reproducible (i.e., will provide the same results everytime and it is easy to check the answers)
set.seed(1001)
# Write code to create diamonds2 dataset. Also, write code to partition this dataset into the training and test data
diamonds
# Write code to create diamonds2 dataset. Also, write code to partition this dataset into the training and test data
diamonds2 <- diamonds %>% filter(carat <= 2.5)
train <- diamonds2 %>% sample_frac(0.8)
test <- diamonds2 %>% setdiff(train)
f <- price ~ carat
# a)	Write code to construct the model using the training dataset.
model1 <- lm(f, train)
summary(model1)
# d)	Write code to obtain the R-squared value for the training dataset.
# Compute R square statustic for the data
rsqr <- function(y, yhat) {
ss.res <- sum((y - yhat)^2)
ss.tot <- sum((y - mean(y))^2)
1 - ss.res / ss.tot
}
# d)	Write code to obtain the R-squared value for the training dataset.
# Compute R square statustic for the data
summary(model1)
# d)	Write code to obtain the R-squared value for the training dataset.
# Compute R square statustic for the data
mdl1 <- summary(model1)
mdl1$r.squared
# f)	Write code to predict the outcomes for the test dataset.
yhat <- predict(model1, test)
# g)	Write code to obtain the R-squared value for the test dataset.
#     Also, using a comment indicate the R-squared value obtained.
# Compute R square statustic for the data
rsqr <- function(y, yhat) {
ss.res <- sum((y - yhat)^2)
ss.tot <- sum((y - mean(y))^2)
1 - ss.res / ss.tot
}
rsqr(test, yhat)
rsqr(test$price, yhat)
#h)	Write code to generate the residual plot for the test dataset.
test_mod <- test %>% mutate(residual = price - yhat)
# Visualise the residual plot
ggplot(test_mod, aes(x=price, y=residual)) +
geom_point() +
#xlim(0, 60) +
#ylim(-30,30) +
geom_abline(slope = 0, intercept=0, col = "blue") +
ggtitle("Median house value vs. residual") +
xlab("Median value") +
ylab("Residual")
# Visualise the residual plot
ggplot(test_mod, aes(x=price, y=residual)) +
geom_point() +
geom_abline(slope = 0, intercept=0, col = "blue") +
ggtitle("Diamond Price vs. residual") +
xlab("Diamond Price") +
ylab("Residual")
# Visualise the residual plot
ggplot(test_mod, aes(x=price, y=residual)) +
geom_point() +
geom_abline(slope = 0, intercept=0, col = "blue", alpha=0.5) +
ggtitle("Diamond Price vs. residual") +
xlab("Diamond Price") +
ylab("Residual")
# Visualise the residual plot
ggplot(test_mod, aes(x=price, y=residual)) +
geom_point(aes(alpha=0.3)) +
geom_abline(slope = 0, intercept=0, col = "blue") +
ggtitle("Diamond Price vs. residual") +
xlab("Diamond Price") +
ylab("Residual")
# Visualise the residual plot
ggplot(test_mod, aes(x=price, y=residual)) +
geom_point(aes(alpha=0.1)) +
geom_abline(slope = 0, intercept=0, col = "blue") +
ggtitle("Diamond Price vs. residual") +
xlab("Diamond Price") +
ylab("Residual")
ggplot(test_mod, aes(price, carat))+
geom_point(col="blue", size=3)+
geom_smooth(method = "lm", se=FALSE, col="red")+
ggtitle("Price vs carat")
ggplot(test_mod, aes(price, carat))+
geom_point(col="blue")+
geom_smooth(method = "lm", se=FALSE, col="red")+
geom_segment(aes(xend=carat, yend=yhat), col="green", size=2)
ggplot(test_mod, aes(price, carat))+
geom_point(col="blue")+
geom_smooth(method = "lm", se=FALSE, col="red")+
geom_segment(aes(xend=carat, yend=yhat), col="green")
ggplot(test_mod, aes(price, carat))+
geom_point(col="blue")+
geom_smooth(method = "lm", se=FALSE, col="red")+
geom_segment(aes(xend=carat, yend=yhat), col="green")+
ggtitle("Price vs carat")
ggplot(test_mod, aes(price, carat))+
geom_smooth(method = "lm", se=FALSE, col="red")+
geom_segment(aes(xend=carat, yend=yhat), col="green")+
geom_point(col="blue")+
ggtitle("Price vs carat")
ggplot(test_mod, aes(price, carat))+
geom_smooth(method = "lm", se=FALSE, col="red")+
geom_segment(aes(xend=carat, yend=yhat), col="green")+
geom_point(col="blue")+
geom_point(aes(y=yhat), shape=1)+
ggtitle("Price vs carat")
ggplot(test_mod, aes(price, carat))+
geom_smooth(method = "lm", se=FALSE, col="red")+
#geom_segment(aes(xend=carat, yend=yhat), col="green")+
geom_point(col="blue")+
geom_point(aes(y=yhat), shape=1)+
ggtitle("Price vs carat")
ggplot(test_mod, aes(price, carat))+
geom_point(col="blue", size=3)+
geom_smooth(method = "lm", se=FALSE, col="red")+
ggtitle("Price vs carat")
# Visualise the residual plot
ggplot(test_mod, aes(x=price, y=residual)) +
geom_point(aes(alpha=0.1)) +
geom_abline(slope = 0, intercept=0, col = "blue") +
ggtitle("Diamond Price vs. residual") +
xlab("Diamond Price") +
ylab("Residual")
ggplot(test_mod, aes(price, carat))+
geom_point(col="blue", size=3)+
geom_smooth(method = "lm", se=FALSE, col="red")+
ggtitle("Price vs carat")
ggplot(test_mod, aes(price, carat))+
geom_point(col="blue")+
geom_smooth(method = "lm", se=FALSE, col="red")+
ggtitle("Price vs carat")
# Visualise the residual plot
ggplot(test_mod, aes(x=price, y=residual)) +
geom_point(aes(alpha=0.1),col="blue") +
geom_abline(slope = 0, intercept=0, col = "red") +
ggtitle("Diamond Price vs. residual") +
xlab("Diamond Price") +
ylab("Residual")
# Visualise the residual plot
ggplot(test_mod, aes(x=price, y=residual)) +
geom_point(aes(alpha=0.1)) +
geom_abline(slope = 0, intercept=0, col = "red") +
ggtitle("Diamond Price vs. residual") +
xlab("Diamond Price") +
ylab("Residual")
# Visualise the residual plot
ggplot(test_mod, aes(x=price, y=residual)) +
geom_point(aes(alpha=0.1)) +
geom_abline(slope = 0, intercept=0, col = "red") +
ggtitle("Diamond Price vs. residual") +
xlab("Diamond Price") +
ylab("Residual")
ggplot(test_mod, aes(price, carat))+
geom_point(col="blue")+
geom_smooth(method = "lm", se=FALSE, col="red")+
ggtitle("Price vs carat")
# Visualise the residual plot
ggplot(test_mod, aes(x=price, y=residual)) +
geom_point(aes(alpha=0.1)) +
geom_abline(slope = 0, intercept=0, col = "red") +
ggtitle("Diamond Price vs. residual") +
xlab("Diamond Price") +
ylab("Residual")
ggplot(test_mod, aes(price, carat))+
geom_point(col="blue")+
geom_smooth(method = "lm", se=FALSE, col="red")+
ggtitle("Price vs carat")
# Visualise the residual plot
ggplot(test_mod, aes(x=price, y=residual)) +
geom_point(aes(alpha=0.1)) +
geom_abline(slope = 0, intercept=0, col = "red") +
ggtitle("Diamond Price vs. residual") +
xlab("Diamond Price") +
ylab("Residual")
# Visualise the residual plot
ggplot(test_mod, aes(x=price, y=residual)) +
geom_point(aes(alpha=0.1)) +
geom_abline(slope = 0, intercept=0, col = "red") +
ggtitle("Diamond Price vs. residual") +
xlab("Diamond Price") +
ylab("Residual")
ggplot(test_mod, aes(price, carat))+
geom_point(col="blue")+
geom_smooth(method = "lm", se=FALSE, col="red")+
ggtitle("Price vs carat")
train <- diamonds2 %>% sample_frac(0.9)
test <- diamonds2 %>% setdiff(train)
f <- price ~ carat
# a)	Write code to construct the model using the training dataset.
model1 <- lm(f, train)
summary(model1)
# d)	Write code to obtain the R-squared value for the training dataset.
mdl1 <- summary(model1)
# d)	Write code to obtain the R-squared value for the training dataset.
mdl1 <- summary(model1)
mdl1$r.squared
# f)	Write code to predict the outcomes for the test dataset.
yhat <- predict(model1, test)
# g)	Write code to obtain the R-squared value for the test dataset.
# Compute R square statustic for the  data
rsqr <- function(y, yhat) {
ss.res <- sum((y - yhat)^2)
ss.tot <- sum((y - mean(y))^2)
1 - ss.res / ss.tot
}
rsqr(test$price, yhat)
#h)	Write code to generate the residual plot for the test dataset.
test_mod <- test %>% mutate(residual = price - yhat)
# Visualise the residual plot
ggplot(test_mod, aes(x=price, y=residual)) +
geom_point(aes(alpha=0.1)) +
geom_abline(slope = 0, intercept=0, col = "red") +
ggtitle("Diamond Price vs. residual") +
xlab("Diamond Price") +
ylab("Residual")
ggplot(test_mod, aes(price, carat))+
geom_point(col="blue")+
geom_smooth(method = "lm", se=FALSE, col="red")+
ggtitle("Price vs carat")
# Code and comments for the second model, a random forest model (model2) for question 2 - indicate the
# sub-questions you are answering - e.g. #a), #b) and #c)
model2 <- randomForest(f, train)
# Code and comments for the second model, a random forest model (model2) for question 2 - indicate the
# sub-questions you are answering - e.g. #a), #b) and #c)
model2 <- randomForest(f, train, ntree=100)
# Predict the results of the test data
yhat <- predict(model2, test)
model2
mean(model2$rsq)
#c.	Write code to predict the outcomes for the test dataset.
yhat <- yhat <- predict(model2, test)
#c.	Write code to predict the outcomes for the test dataset.
yhat <- predict(model2, test)
# d.	Write code to obtain the R-squared value for the test dataset.
rsqr(test$price, yhat)
# Visualise the residual plot
ggplot(test_mod, aes(x=price, y=residual)) +
geom_point(aes(alpha=0.1)) +
geom_abline(slope = 0, intercept=0, col = "red") +
ggtitle("Diamond Price vs. residual") +
xlab("Diamond Price") +
ylab("Residual")
#e.	Write code to generate the residual plot for the test dataset.
# Create a new variable that has all the columns of the test dataset # plus the residual variable
test_mod <- test %>% mutate(residual = price - yhat)
# Visualise the residual plot
ggplot(test_mod, aes(x=price, y=residual)) +
geom_point(aes(alpha=0.1)) +
geom_abline(slope = 0, intercept=0, col = "red") +
ggtitle("Diamond Price vs. residual") +
xlab("Diamond Price") +
ylab("Residual")
