setwd("H:/COMP120/Lab/lab06")
library(tidyverse)
gender <- c("U", "M", "M", "F", "U", "F", "F", "F", "M", "F")
age <- c(25, 18, 31, 19, 21, 23, 18, 19, 19, 23)
A <- tibble(gender=factor(gender,
levels=c("U", "F", "M"),
labels=c("Unspecified", "Female","Male")),
age=age)
A
A %>% summarise(MeanAge=mean(age), Count=n())
mean(A$age)
length(A$age)
# Where the summarise() function becomes truly interesting is when it is used in conjunction with the group_by()
A %>% group_by(gender) %>% summarise(MeanAge=mean(age), Count=n())
# RESHAPING:
temperature <- read_csv("weather.csv")
temperature
y <- sin(1:10)
y
ggplot(data = sin(1:10)) +
geom_point()
tibble(1:10,sin(1:10))
ggplot(data = tibble(1:10,sin(1:10))) +
geom_point()
ggplot(data = tibble(num = 1:10, val =sin(1:10))) +
geom_point()
ggplot(data = tibble(num = 1:10, val =sin(1:10))) +
geom_point(mapping = aes(num,val))
ggplot(data = tibble(num = 1:100, val =sin(1:100))) +
geom_point(mapping = aes(num,val))
temperature %>% ggplot(aes(x=Year)) +
geom_smooth(aes(y=Auckland, colour=factor(1))) +
geom_smooth(aes(y=Christchurch, colour=factor(2))) +
geom_smooth(aes(y=Dunedin, colour=factor(3))) +
geom_smooth(aes(y=Wellington, colour=factor(4))) +
ylab("Temperature") +
scale_color_discrete(name="City",
labels=c("Auckland", "Christchurch",
"Dunedin", "Wellington"))
temperature %>% gather(c(Auckland, Wellington, Christchurch, Dunedin), key = "City", value = "Temperature")
temperature %>%
pivot_longer(c(Auckland, Wellington, Christchurch, Dunedin),
names_to = "city",
values_to = "Tem")
temperature %>%
pivot_longer(c(Auckland, Wellington, Christchurch, Dunedin),
names_to = "city",
values_to = "Tem") %>%
arrange(city)
temperature %>% gather(-Year, key = "City", value = "Temperature")
temperature %>% gather(-Year, key="City", value = "Temperature") %>%
ggplot(aes(x=Year, y=Temperature, colour=City)) + geom_smooth()
employment <- read_csv("employment.csv")
employment
employment %>% spread(key = Category, value = Rate)
employment %>% spread(Category, Rate) %>%
ggplot(aes(x=Year, y=Unemployment, colour=Sex)) +
geom_line() +
ggtitle("Employment Rate by gender over a time period")
employment %>% spread(Category, Rate) %>%
ggplot(aes(x=Year, y=Unemployment, colour=Sex)) +
geom_line() +
ggtitle("Unemployment Rate by gender over a time period")
table3
table3 %>%
separate(rate, into = c("cases","population"), sep = "/")
## unite function
table5
table5 %>%
unite(combined, century, year, sep="")
table5 %>%
unite(combined, century, year, sep="") %>%
separate(rate, into = c("cases", "population"), sep = "/")
# Step 1
bp = read_csv("BloodPressure-modified.csv")
bp
bp$MeasurementDate <- as.Date(bp$MeasurementDate)
bp
# Step 1
bp = read_csv("BloodPressure-modified.csv")
bp
library(lubridate)
bp$MeasurementDate <- dmy_hm(bp$MeasurementDate)
bp
# Step 2
bp %>%
select(MeasurementDate, SYS, DIA, Pulse)
# Step 3
bp %>%
filter(is.na(Pulse))
# Step 3
bp %>%
filter(!is.na(Pulse))
# Step 4
bp.perday <- bp %>%   # Create a new data frame called bp.perday
mutate(MeasurementDate = as_date(MeasurementDate)) %>%  # remove the time component from MeasurementDate
group_by(MeasurementDate) %>%
summarise(avg_SYS = mean(SYS),
avg_DIA = mean(DIA),
avg_Pulse = mean(Pulse))
bp.perday
# Step 4
bp.perday <- bp %>%   # Create a new data frame called bp.perday
mutate(MeasurementDate = as_date(MeasurementDate)) %>%  # remove the time component from MeasurementDate
group_by(MeasurementDate) %>%
summarise(avg_SYS = mean(SYS),
avg_DIA = mean(DIA),
avg_Pulse = mean(Pulse, na.rm = FALSE))
bp.perday
# Step 4
bp.perday <- bp %>%   # Create a new data frame called bp.perday
mutate(MeasurementDate = as_date(MeasurementDate)) %>%  # remove the time component from MeasurementDate
group_by(MeasurementDate) %>%
summarise(avg_SYS = mean(SYS),
avg_DIA = mean(DIA),
avg_Pulse = mean(Pulse, na.rm = TRUE))
bp.perday
View(bp)
View(bp.perday)
# Step 4
bp.perday <- bp %>%   # Create a new data frame called bp.perday
mutate(MeasurementDate = as_date(MeasurementDate)) %>%  # remove the time component from MeasurementDate
group_by(MeasurementDate) %>%
summarise(mean(SYS),
avg_DIA = mean(DIA),
avg_Pulse = mean(Pulse, na.rm = TRUE))
bp.perday
# Step 4
bp.perday <- bp %>%   # Create a new data frame called bp.perday
mutate(MeasurementDate = as_date(MeasurementDate)) %>%  # remove the time component from MeasurementDate
group_by(MeasurementDate) %>%
summarise(SYS = mean(SYS),
DIA = mean(DIA),
Pulse = mean(Pulse, na.rm = TRUE))
bp.perday
# Step 5
bp.perday %>%
mutate(Rating = ifelse(SYS>130|DIA>85, "High", "Normal"))
# Step 6
bp.perday %>%
mutate(Rating = ifelse(SYS>130|DIA>85, "High", "Normal")) %>%
ggplot()+
geom_linerange(aes(ymin = DIA, ymax = SYS, colour = Rating)) +
geom_point() +
xlab("Measurement date")
# Step 6
bp.perday %>%
mutate(Rating = ifelse(SYS>130|DIA>85, "High", "Normal")) %>%
ggplot(aes(x=MeasurementDate, y=Pulse)) +
geom_linerange(aes(ymin = DIA, ymax = SYS, colour = Rating)) +
geom_point() +
xlab("Measurement date")
# Step 4
bp.perday <- bp %>%   # Create a new data frame called bp.perday
mutate(MeasurementDate = as_date(MeasurementDate)) %>%  # remove the time component from MeasurementDate
group_by(MeasurementDate) %>% # group_by date
summarise(SYS = mean(SYS), # summarising the result and computing the mean of the SYS, DIA and Pulse
DIA = mean(DIA),
Pulse = mean(Pulse))
bp.perday
# Step 5
bp.perday %>%
mutate(Rating = ifelse(SYS>130|DIA>85, "High", "Normal")) # Create a Rating column based on values of SYS and DIA columns
# Step 6
bp.perday %>%
mutate(Rating = ifelse(SYS>130|DIA>85, "High", "Normal")) %>%
ggplot(aes(x=MeasurementDate, y=Pulse)) +
geom_linerange(aes(ymin = DIA, ymax = SYS, colour = Rating)) +
geom_point() +
xlab("Measurement date")
# Step 4
bp.perday <- bp %>%   # Create a new data frame called bp.perday
mutate(MeasurementDate = as_date(MeasurementDate)) %>%  # remove the time component from MeasurementDate
group_by(MeasurementDate) %>% # group_by date
summarise(SYS = mean(SYS), # summarising the result and computing the mean of the SYS, DIA and Pulse
DIA = mean(DIA),
Pulse = mean(Pulse, na.rm = TRUE))
bp.perday
View(bp.perday)
# Step 4
bp.perday <- bp %>%   # Create a new data frame called bp.perday
mutate(MeasurementDate = as_date(MeasurementDate)) %>%  # remove the time component from MeasurementDate
group_by(MeasurementDate) %>% # group_by date
summarise(SYS = mean(SYS), # summarising the result and computing the mean of the SYS, DIA and Pulse
DIA = mean(DIA),
Pulse = mean(Pulse, na.rm = TRUE))
bp.perday
# Step 3
bp <- bp %>%
filter(!is.na(Pulse)) # keep only the rows where the value in the Pulse column is not NA
# Step 4
bp.perday <- bp %>%   # Create a new data frame called bp.perday
mutate(MeasurementDate = as_date(MeasurementDate)) %>%  # remove the time component from MeasurementDate
group_by(MeasurementDate) %>% # group_by date
summarise(SYS = mean(SYS), # summarising the result and computing the mean of the SYS, DIA and Pulse
DIA = mean(DIA),
Pulse = mean(Pulse, na.rm = TRUE))
bp.perday
# Step 6
bp.perday %>%
mutate(Rating = ifelse(SYS>130|DIA>85, "High", "Normal")) %>%
ggplot(aes(x=MeasurementDate, y=Pulse)) +
geom_linerange(aes(ymin = DIA, ymax = SYS, colour = Rating)) +
geom_point() +
xlab("Measurement date")
# Step 5
bp.perday <- bp.perday %>%
mutate(Rating = ifelse(SYS>130|DIA>85, "High", "Normal")) # Create a Rating column based on values of SYS and DIA columns
# Step 6
bp.perday %>%
ggplot(aes(x=MeasurementDate, y=Pulse)) +
geom_linerange(aes(ymin = DIA, ymax = SYS, colour = Rating)) +
geom_point() +
xlab("Measurement date")
View(bp.perday)
pivot_longer(c(DIA,Pulse,SYS), names_to="Stat",values_to="Reading") %>%
ggplot(mapping = aes(x=MeasurementDate,y=Reading)) +
geom_point()+
geom_smooth(aes(color=Stat))+
xlab("Date")
# Step 7
bp.perday %>%
pivot_longer(c(DIA,Pulse,SYS), names_to="Stat",values_to="Reading") %>%
ggplot(mapping = aes(x=MeasurementDate,y=Reading)) +
geom_point()+
geom_smooth(aes(color=Stat))+
xlab("Date")
# Step 7
bp.perday %>%
pivot_longer(c(DIA,Pulse,SYS), names_to="Stat",values_to="Reading") %>%
ggplot(mapping = aes(x=MeasurementDate,y=Reading)) +
geom_point(aes(color=Stat))+
geom_smooth(aes(color=Stat))+
xlab("Date")
ggplot(mapping = aes(x=MeasurementDate,y=Reading)) +
geom_point(aes(color=Stat))+
geom_smooth(aes(color=Stat))+
xlab("Date")
bp.gathered %>%
ggplot(mapping = aes(x=MeasurementDate,y=Reading)) +
geom_point(aes(color=Stat))+
geom_smooth(aes(color=Stat))+
xlab("Date")
# Step 7
bp.gathered <- bp.perday %>%
pivot_longer(c(DIA,Pulse,SYS), names_to="Stat",values_to="Reading")
bp.gathered %>%
ggplot(mapping = aes(x=MeasurementDate,y=Reading)) +
geom_point(aes(color=Stat))+
geom_smooth(aes(color=Stat))+
xlab("Date")
# Step 6
bp.perday %>%
ggplot(aes(x=MeasurementDate, y=Pulse)) +
geom_linerange(aes(ymin = DIA, ymax = SYS, colour = Rating)) +
geom_point() +
xlab("Measurement date")
# Step 7
bp.gathered <- bp.perday %>% # Create a new tibble to store long format blood pressure data per day
pivot_longer(c(DIA,Pulse,SYS), names_to="Stat",values_to="Reading") # gather 3 columns into 1 column
bp.gathered %>%
ggplot(mapping = aes(x=MeasurementDate,y=Reading)) +  # map the x, y axis
geom_point(aes(color=Stat))+ #graph the geom point object
geom_smooth(aes(color=Stat))+ #graph the smooth line object
xlab("Date")
# Step 4
bp.perday <- bp %>%   # Create a new data frame called bp.perday
mutate(MeasurementDate = as_date(MeasurementDate)) %>%  # remove the time component from MeasurementDate
group_by(MeasurementDate) %>% # group_by date
summarise(SYS = mean(SYS), # summarising the result and computing the mean of the SYS, DIA and Pulse
DIA = mean(DIA),
Pulse = mean(Pulse))
bp.perday
# Step 5
bp.perday <- bp.perday %>%
mutate(Rating = ifelse(SYS>130|DIA>85, "High", "Normal")) # Create a Rating column based on values of SYS and DIA columns
# Step 6
bp.perday %>%
ggplot(aes(x=MeasurementDate, y=Pulse)) + #map the x, and y axis
geom_linerange(aes(ymin = DIA, ymax = SYS, colour = Rating)) + # graph the verticle line based on a range between DIA, and SYS, color differently by Rating
geom_point() +  # graph the points geom object
xlab("Measurement date")
# Step 1
bp = read_csv("BloodPressure-modified.csv") # load file into bp tibble.
bp$MeasurementDate <- dmy_hm(bp$MeasurementDate) # convert character column to datetime column.
# Step 2
bp %>%
select(MeasurementDate, SYS, DIA, Pulse) #  keep just the MeasurementDate, SYS, DIA, and Pulse columns
# Step 3
bp <- bp %>%
filter(!is.na(Pulse)) # keep only the rows where the value in the Pulse column is not NA
# Step 4
bp.perday <- bp %>%   # Create a new data frame called bp.perday
mutate(MeasurementDate = as_date(MeasurementDate)) %>%  # remove the time component from MeasurementDate
group_by(MeasurementDate) %>% # group_by date
summarise(SYS = mean(SYS), # summarising the result and computing the mean of the SYS, DIA and Pulse
DIA = mean(DIA),
Pulse = mean(Pulse))
bp.perday
bp
# Step 2
bp %>%
select(MeasurementDate, SYS, DIA, Pulse) #  keep just the MeasurementDate, SYS, DIA, and Pulse columns
# Step 3
bp <- bp %>%
filter(!is.na(Pulse)) # keep only the rows where the value in the Pulse column is not NA
# Step 4
bp.perday <- bp %>%   # Create a new data frame called bp.perday
mutate(MeasurementDate = as_date(MeasurementDate)) %>%  # remove the time component from MeasurementDate
group_by(MeasurementDate) %>% # group_by date
summarise(SYS = mean(SYS), # summarising the result and computing the mean of the SYS, DIA and Pulse
DIA = mean(DIA),
Pulse = mean(Pulse))
bp.perday
# Step 5
bp.perday <- bp.perday %>%
mutate(Rating = ifelse(SYS>130|DIA>85, "High", "Normal")) # Create a Rating column based on values of SYS and DIA columns
# Step 6
bp.perday %>%
ggplot(aes(x=MeasurementDate, y=Pulse)) + #map the x, and y axis
geom_linerange(aes(ymin = DIA, ymax = SYS, colour = Rating)) + # graph the verticle line based on a range between DIA, and SYS, color differently by Rating
geom_point() +  # graph the points geom object
xlab("Measurement date")
# Step 7
bp.gathered <- bp.perday %>% # Create a new tibble to store long format blood pressure data per day
pivot_longer(c(DIA,Pulse,SYS), names_to="Stat",values_to="Reading") # gather 3 columns into 1 column
bp.gathered %>%
ggplot(mapping = aes(x=MeasurementDate,y=Reading)) +  # map the x, y axis
geom_point(aes(color=Stat))+ #graph the geom point object
geom_smooth(aes(color=Stat))+ #graph the smooth line object
xlab("Date")
# Step 2
bp <- bp %>%
select(MeasurementDate, SYS, DIA, Pulse) #  keep just the MeasurementDate, SYS, DIA, and Pulse columns
# Step 3
bp <- bp %>%
filter(!is.na(Pulse)) # keep only the rows where the value in the Pulse column is not NA
# Step 4
bp.perday <- bp %>%   # Create a new data frame called bp.perday
mutate(MeasurementDate = as_date(MeasurementDate)) %>%  # remove the time component from MeasurementDate
group_by(MeasurementDate) %>% # group_by date
summarise(SYS = mean(SYS), # summarising the result and computing the mean of the SYS, DIA and Pulse
DIA = mean(DIA),
Pulse = mean(Pulse))
bp.perday
# Step 5
bp.perday <- bp.perday %>%
mutate(Rating = ifelse(SYS>130|DIA>85, "High", "Normal")) # Create a Rating column based on values of SYS and DIA columns
# Step 6
bp.perday %>%
ggplot(aes(x=MeasurementDate, y=Pulse)) + #map the x, and y axis
geom_linerange(aes(ymin = DIA, ymax = SYS, colour = Rating)) + # graph the verticle line based on a range between DIA, and SYS, color differently by Rating
geom_point() +  # graph the points geom object
xlab("Measurement date")
# Step 7
bp.gathered <- bp.perday %>% # Create a new tibble to store long format blood pressure data per day
pivot_longer(c(DIA,Pulse,SYS), names_to="Stat",values_to="Reading") # gather 3 columns into 1 column
bp.gathered %>%
ggplot(mapping = aes(x=MeasurementDate,y=Reading)) +  # map the x, y axis
geom_point(aes(color=Stat))+ #graph the geom point object
geom_smooth(aes(color=Stat))+ #graph the smooth line object
xlab("Date")
p.gathered
bp.gathered
bp.gathered %>%
ggplot(mapping = aes(x=MeasurementDate,y=Reading)) +  # map the x, y axis
geom_point(aes(color=Stat))+ #graph the geom point object
geom_smooth(aes(color=Stat))+ #graph the smooth line object
xlab("Date")
